import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
import matplotlib.pyplot as plt
from packaging.utils import _
from transformers.utils.fx import torch_repeat_interleave


# 1、生成数据
# 生成1000个在【0，4Π】范围内的点
X_numpy = np.linspace(0, 4*np.pi, 1000).reshape(-1, 1)

y_numpy = np.sin(X_numpy)
noise = np.random.normal(0, 0.1, size=y_numpy.shape)
y_numpy_noise = y_numpy + noise


# 2、转换为Pytorch张量
X = torch.tensor(X_numpy, dtype=torch.float32)
y = torch.tensor(y_numpy_noise, dtype=torch.float32)

# 3、定义神经网络结构
class SinNet(nn.Module):
    def __init__(self):
        super(SinNet, self).__init__()
        self.net = nn.Sequential(
            nn.Linear(1, 64),
            nn.Tanh(),
            nn.Linear(64, 32),
            nn.Tanh(),
            nn.Linear(32, 1),
        )

    def forward(self, x):
        return self.net(x)

model = SinNet()

# 4、定义损失函数和优化器
loss_fn = nn.MSELoss()

# 使用Adam优化器
optimizer = torch.optim.Adam(model.parameters(), lr=0.01)


# 训练模型
num_epochs = 2000
for epoch in range(num_epochs):
    y_pred = model(X)
    loss = loss_fn(y_pred, y)
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()

    if (epoch + 1) % 200 == 0:
        print(f'Epoch [{epoch + 1} / {num_epochs}], loss:{loss.item():.4f}')



print(f'\n训练完成！{"---^O^---" * 5} ')
# a_learned = model.item()
# b_learned = model.item()
# print(f'拟合的斜率a：{a_learned:.4f}')
# print(f'拟合的截距b：{b_learned:.4f}')


# 6、评估模型,绘制图样
model.eval()

with torch.no_grad():
    y_predicted = model(X).numpy()

plt.figure(figsize=(10, 6))
plt.scatter(X_numpy, y_numpy, label='Raw data', color='blue', alpha=0.6)
plt.plot(X_numpy, y_predicted, label='Model Prediction', color='red', linewidth=2)
plt.xlabel('X')
plt.ylabel('y')
plt.legend()
plt.grid(True)
plt.show()
