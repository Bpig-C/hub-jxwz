# 使用GRU代替LSTM实现文本分类任务

import pandas as pd
import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import Dataset, DataLoader

# 读取数据
dataset = pd.read_csv("../Week01/dataset.csv", sep="\t", header=None)
texts_data = dataset[0].tolist()
string_labels_data = dataset[1].tolist()

# 标签映射
label_to_index = {label: i for i, label in enumerate(set(string_labels_data))}
numerical_labels = [label_to_index[label] for label in string_labels_data]

# 字符映射
char_to_index = {'<pad>': 0}
for text_item in texts_data:
    for char in text_item:
        if char not in char_to_index:
            char_to_index[char] = len(char_to_index)

index_to_char = {i: char for char, i in char_to_index.items()}
vocab_size = len(char_to_index)

max_len = 40


# 数据集类
class CharGRUDataset(Dataset):
    def __init__(self, texts_list, labels_list, char_to_idx, max_length):
        self.texts_list = texts_list
        self.labels_list = torch.tensor(labels_list, dtype=torch.long)
        self.char_to_idx = char_to_idx
        self.max_length = max_length

    def __len__(self):
        return len(self.texts_list)

    def __getitem__(self, idx):
        text_item = self.texts_list[idx]
        indices = [self.char_to_idx.get(char, 0) for char in text_item[:self.max_length]]
        indices += [0] * (self.max_length - len(indices))
        return torch.tensor(indices, dtype=torch.long), self.labels_list[idx]


# GRU 模型类
class GRUClassifier(nn.Module):
    def __init__(self, vocab_size, embedding_dim, hidden_dim, output_dim):
        super(GRUClassifier, self).__init__()
        self.embedding = nn.Embedding(vocab_size, embedding_dim)
        self.gru = nn.GRU(embedding_dim, hidden_dim, batch_first=True)
        self.fc = nn.Linear(hidden_dim, output_dim)

    def forward(self, x):
        embedded = self.embedding(x)
        gru_out, hidden_state = self.gru(embedded)
        out = self.fc(hidden_state.squeeze(0))
        return out


# 训练和预测
gru_dataset = CharGRUDataset(texts_data, numerical_labels, char_to_index, max_len)
dataloader = DataLoader(gru_dataset, batch_size=32, shuffle=True)

embedding_dim = 64
hidden_dim = 128
output_dim = len(label_to_index)

# 正确初始化模型
model = GRUClassifier(vocab_size, embedding_dim, hidden_dim, output_dim)
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

num_epochs = 4
for epoch in range(num_epochs):
    model.train()
    running_loss = 0.0
    for idx, (inputs, labels) in enumerate(dataloader):
        optimizer.zero_grad()
        outputs = model(inputs)  # 这里应该没问题，model是可调用的
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        running_loss += loss.item()
        if idx % 50 == 0:
            print(f"Batch 个数 {idx}, 当前Batch Loss: {loss.item()}")

    print(f"Epoch [{epoch + 1}/{num_epochs}], Loss: {running_loss / len(dataloader):.4f}")


# 预测函数
def classify_text_gru(text, model_instance, char_to_idx, max_length, index_to_label_dict):
    indices = [char_to_idx.get(char, 0) for char in text[:max_length]]
    indices += [0] * (max_length - len(indices))
    input_tensor = torch.tensor(indices, dtype=torch.long).unsqueeze(0)

    model_instance.eval()  # 这里使用eval()方法
    with torch.no_grad():
        output = model_instance(input_tensor)  # 这里调用模型

    _, predicted_index = torch.max(output, 1)
    predicted_index = predicted_index.item()
    predicted_label = index_to_label_dict[predicted_index]

    return predicted_label


index_to_label = {i: label for label, i in label_to_index.items()}

# 测试
new_text = "帮我导航到北京"
predicted_class = classify_text_gru(new_text, model, char_to_index, max_len, index_to_label)
print(f"输入 '{new_text}' 预测为: '{predicted_class}'")

new_text_2 = "查询明天北京的天气"
predicted_class_2 = classify_text_gru(new_text_2, model, char_to_index, max_len, index_to_label)
print(f"输入 '{new_text_2}' 预测为: '{predicted_class_2}'")

print("GRU文本分类模型训练和预测完成！")
